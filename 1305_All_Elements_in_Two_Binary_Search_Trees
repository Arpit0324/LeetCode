Leetcode 1305: All Elements in Two Binary Search Trees
Detailed video explanation: https://youtu.be/B97Hk1H2x2s
======================================================


C++:
----
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode *> S1, S2;
        vector<int> result;
        while(root1 || root2 || !S1.empty() || !S2.empty()){
            while(root1){
                S1.push(root1);
                root1 = root1->left;
            }
            while(root2){
                S2.push(root2);
                root2 = root2->left;
            }
            if(S2.empty() || (!S1.empty() && S1.top()->val <= S2.top()->val)){
                root1 = S1.top();
                S1.pop();
                result.push_back(root1->val);
                root1 = root1->right;
            } else {
                root2 = S2.top();
                S2.pop();
                result.push_back(root2->val);
                root2 = root2->right;
            }
        }
        return result;
    }
};



Java:
----
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        Stack<TreeNode> S1 = new Stack(), S2 = new Stack();
        List<Integer> result = new ArrayList();
        while(root1 != null || root2 != null || !S1.empty() || !S2.empty()){
            while(root1 != null){
                S1.push(root1);
                root1 = root1.left;
            }
            while(root2 != null){
                S2.push(root2);
                root2 = root2.left;
            }
            if(S2.empty() || (!S1.empty() && S1.peek().val <= S2.peek().val)){
                root1 = S1.pop();
                result.add(root1.val);
                root1 = root1.right;
            } else {
                root2 = S2.pop();
                result.add(root2.val);
                root2 = root2.right;
            }
        }
        return result;
    }
}



Python3:
-------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        S1, S2, result = [], [], []
        while root1 != None or root2 != None or len(S1) > 0 or len(S2) > 0:
            while root1 != None:
                S1.append(root1)
                root1 = root1.left
            while root2 != None:
                S2.append(root2)
                root2 = root2.left
            if len(S2) == 0 or (len(S1) > 0 and S1[-1].val <= S2[-1].val):
                root1 = S1.pop()
                result.append(root1.val)
                root1 = root1.right
            else:
                root2 = S2.pop()
                result.append(root2.val)
                root2 = root2.right
                
        return result;


