Leetcode 435: Non-overlapping Intervals
Detailed video explanation: https://youtu.be/BW7LeuJIMhE
===============================================

C++:
----
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.size() < 2) return 0;
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){
            return a[0] < b[0];
        });
        int count = 0, last_included = 0;
        for(int i = 1; i < intervals.size(); ++i){
            if(intervals[i][0] < intervals[last_included][1]){ // Overlap
                count++;
                if(intervals[i][1] < intervals[last_included][1]) last_included = i;
            } else 
                last_included = i;
        }
        return count;
    }
};


Java:
----
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length < 2) return 0;
        Arrays.sort(intervals, (a, b)->(a[0] - b[0]));
        int count = 0, last_included = 0;
        for(int i = 1; i < intervals.length; ++i){
            if(intervals[i][0] < intervals[last_included][1]){ // Overlap
                count++;
                if(intervals[i][1] < intervals[last_included][1]) last_included = i;
            } else 
                last_included = i;
        }
        return count;
    }
}


Python3:
-------
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        if len(intervals) < 2: return 0
        intervals.sort()
        count, last_included = 0, 0
        for i in range(1, len(intervals)):
            if intervals[i][0] < intervals[last_included][1]: # Overlap
                count += 1
                if intervals[i][1] < intervals[last_included][1]: last_included = i
            else:
                last_included = i
        return count

