Leetcode 1022: Sum of Root To Leaf Binary Numbers
Detailed video explanation: https://youtu.be/Wj4mLZ7XW0A
==================================================


C++:
----
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int sumRootToLeaf(TreeNode* root, int sum) {
        if(!root) return 0;
        sum = (sum << 1) + root->val;
        if(!root->left && !root->right) return sum;
        return sumRootToLeaf(root->left, sum) + sumRootToLeaf(root->right, sum);
    }
public:
    int sumRootToLeaf(TreeNode* root) {
        return sumRootToLeaf(root, 0);
    }
};




Java:
-----
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int sumRootToLeaf(TreeNode root, int sum) {
        if(root == null) return 0;
        sum = (sum << 1) + root.val;
        if(root.left == null && root.right == null) return sum;
        return sumRootToLeaf(root.left, sum) + sumRootToLeaf(root.right, sum);
    }
    public int sumRootToLeaf(TreeNode root) {
        return sumRootToLeaf(root, 0);
    }
}




Python3:
-------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumRootToLeaf(self, root: TreeNode) -> int:
        def sumRootToLeaf(root, sum):
            if root == None: return 0
            sum = (sum << 1) + root.val
            if root.left == None and root.right == None: return sum
            return sumRootToLeaf(root.left, sum) + sumRootToLeaf(root.right, sum)
        
        return sumRootToLeaf(root, 0)


