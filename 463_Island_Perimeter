Leetcode 463: Island Parameter
Video Explanation: https://youtu.be/UcEYCLPWREQ

C++
---
Iterative:

class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int perimeter = 0;
        int r = grid.size(), c = grid[0].size();
        for(int i = 0; i < grid.size(); ++i){
            for(int j = 0; j < grid[0].size(); ++j){
                if(grid[i][j] == 0) continue;
                perimeter += 4;
                if(i > 0) perimeter -= grid[i-1][j];
                if(j > 0) perimeter -= grid[i][j-1];
                if(i < r-1) perimeter -= grid[i+1][j];
                if(j < c-1) perimeter -= grid[i][j+1];
            }
        }
        return perimeter;
    }
};

Recursive (DFS):

class Solution {
    void dfs(vector<vector<int>>& grid, int i, int j, int& perimeter){
        grid[i][j] = 2;
        if(i == 0 || grid[i-1][j] == 0) perimeter++;
        if(i == grid.size() - 1 || grid[i+1][j] == 0) perimeter++;
        if(j == 0 || grid[i][j-1] == 0) perimeter++;
        if(j == grid[0].size()-1 || grid[i][j+1] == 0) perimeter++;
        
        if(i > 0 && grid[i-1][j] == 1) dfs(grid, i-1, j, perimeter);
        if(j > 0 && grid[i][j-1] == 1) dfs(grid, i, j-1, perimeter);
        if(i < grid.size()-1 && grid[i+1][j] == 1) dfs(grid, i+1, j, perimeter);
        if(j < grid[0].size()-1 && grid[i][j+1] == 1) dfs(grid, i, j+1, perimeter);
    }
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int perimeter = 0;
        for(int i = 0; i < grid.size(); ++i){
            for(int j = 0; j < grid[0].size(); ++j)
                if(grid[i][j] == 1) dfs(grid, i, j, perimeter);
        }
        for(int i = 0; i < grid.size(); ++i){
            for(int j = 0; j < grid[0].size(); ++j)
                if(grid[i][j] == 2) grid[i][j] = 1;
        }
        return perimeter;
    }
};


Java:
-----
Iterative:

public int islandPerimeter(int[][] grid) {
        int perimeter = 0;
        int r = grid.length, c = grid[0].length;
        
        for(int i = 0; i < r; ++i){
            for(int j = 0; j < c; ++j){
                if(grid[i][j] == 0) continue;
                perimeter += 4;
                if(i > 0) perimeter -= grid[i-1][j];
                if(j > 0) perimeter -= grid[i][j-1];
                if(i < r-1) perimeter -= grid[i+1][j];
                if(j < c-1) perimeter -= grid[i][j+1];
            }
        }
        return perimeter;
    }
    
    
Python3:
-------
def islandPerimeter(self, grid: List[List[int]]) -> int:
        perimeter = 0
        r,c = len(grid), len(grid[0])
        for i in range(r):
            for j in range(c):
                if grid[i][j] == 0: continue
                perimeter += 4
                if i > 0: perimeter -= grid[i-1][j]
                if j > 0: perimeter -= grid[i][j-1]
                if i < r-1: perimeter -= grid[i+1][j]
                if j < c-1: perimeter -= grid[i][j+1]
        return perimeter
