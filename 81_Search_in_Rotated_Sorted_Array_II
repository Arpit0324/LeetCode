Leetcode 81: Search in Rotated Sorted Array II
Detailed video explanation: https://youtu.be/WkihvY2rJjc
====================================================

C++:
----
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l=0, r = nums.size()-1;
        while(l <= r){
            int mid = l + (r-l)/2;
            if(nums[mid] == target) return true;
            if( (nums[l] == nums[mid]) && (nums[r] == nums[mid])) {l++; r--;}
            else if(nums[l] <= nums[mid]){
                if((nums[l] <= target) && (nums[mid] > target)) r = mid-1;
                else l = mid + 1;
            } else {
                if((nums[mid] < target) && (nums[r] >= target)) l = mid + 1;
                else r = mid-1;
            }
        }
        return false;
    }
};



Java:
-----
class Solution {
    public boolean search(int[] nums, int target) {
        int l=0, r = nums.length-1;
        while(l <= r){
            int mid = l + (r-l)/2;
            if(nums[mid] == target) return true;
            if( (nums[l] == nums[mid]) && (nums[r] == nums[mid])) {l++; r--;}
            else if(nums[l] <= nums[mid]){
                if((nums[l] <= target) && (nums[mid] > target)) r = mid-1;
                else l = mid + 1;
            } else {
                if((nums[mid] < target) && (nums[r] >= target)) l = mid + 1;
                else r = mid-1;
            }
        }
        return false;
    }
}



Python3:
--------
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        l, r = 0, len(nums)-1
        while l <= r:
            mid = l + (r-l)//2
            if nums[mid] == target: return True
            if (nums[l] == nums[mid]) and (nums[r] == nums[mid]): l, r = l+1, r-1
            elif nums[l] <= nums[mid]:
                if (nums[l] <= target) and (nums[mid] > target): r = mid-1
                else: l = mid + 1
            else:
                if (nums[mid] < target) and (nums[r] >= target): l = mid + 1
                else: r = mid-1
        return False

