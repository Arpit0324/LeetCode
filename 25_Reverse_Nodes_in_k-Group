Leetcode 25: Reverse Nodes in k-Group
Detailed video explanation: https://youtu.be/BfQeP6XEXEc
========================================================

C++:
---
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head || !head->next || k == 1) return head;
        int n = 0; // count
        ListNode *curr = head;
        while(curr){
            n++;
            curr = curr->next;
        }
        
        ListNode *prev = nullptr, *next, *newHead; 
        ListNode *t1 = nullptr, *t2 = head;
        curr = head;
        
        while(n >= k){
            for(int i = 0; i < k; i++){
                next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
            }
            if(!newHead) newHead = prev;
            if(t1) t1->next = prev;
            t2->next = curr; // n is not multiple of k
            t1 = t2;
            t2 = curr;
            prev = nullptr;
            n -= k;
        }
        return newHead;
    }
};

Python3:
-------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if (head == None) or (head.next == None) or (k == 1): return head
        n = 0 # count
        curr = head
        while curr != None:
            n, curr = n+1, curr.next
        
        prev, next, newHead = None, None, None
        t1, t2 = None, head
        curr = head
        
        while n >= k:
            for i in range(k):
                next = curr.next
                curr.next = prev
                prev = curr
                curr = next
            
            if newHead == None: newHead = prev
            if t1 != None: t1.next = prev
            t2.next = curr # n is not multiple of k
            t1 = t2
            t2 = curr
            prev = None
            n -= k
        
        return newHead

