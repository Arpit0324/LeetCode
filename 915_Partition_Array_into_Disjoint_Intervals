Leetcode 915 : Partition Array into Disjoint Intervals
Detailed video explanation : https://youtu.be/LvS4FcrGnD8
========================================================


C++:
-----
class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int n = nums.size();
        vector<int> min_arr(n, nums[n-1]);
        vector<int> max_arr(n, nums[0]);
        for(int i = 1; i < n; ++i){
            max_arr[i] = max(max_arr[i-1], nums[i]);
            min_arr[n-1-i] = min(min_arr[n-i], nums[n-1-i]);
        }
        
        for(int i = 0; i < n; ++i){
            if(max_arr[i] <= min_arr[i+1])
                return i+1;
        }
        return 0;
    }
};



Java:
-----
class Solution {
    public int partitionDisjoint(int[] nums) {
        int n = nums.length;
        int[] min_arr = new int[n];
        min_arr[n-1] = nums[n-1];
        int[] max_arr = new int[n];
        max_arr[0] = nums[0];
        for(int i = 1; i < n; ++i){
            max_arr[i] = Math.max(max_arr[i-1], nums[i]);
            min_arr[n-1-i] = Math.min(min_arr[n-i], nums[n-1-i]);
        }
        
        for(int i = 0; i < n; ++i){
            if(max_arr[i] <= min_arr[i+1])
                return i+1;
        }
        return 0;
    }
}




Python3:
--------
class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        n = len(nums)
        min_arr = [nums[n-1]]*n
        max_arr = [nums[0]]*n
        
        for i in range(1, n):
            max_arr[i] = max(max_arr[i-1], nums[i])
            min_arr[n-1-i] = min(min_arr[n-i], nums[n-1-i])
        
        for i in range(n):
            if max_arr[i] <= min_arr[i+1]:
                return i+1
        
        return 0

