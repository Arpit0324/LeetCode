Leetcode 84: Largest Rectangle in Histogram
Detailed video explanation: https://youtu.be/2JPo2JnaJeo
=================================================


C++:
----
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> sL(n, 0);
        vector<int> sR(n, 0);
        sL[0] = -1, sR[n-1] = n;
        for(int i = 1; i < n; ++i){
            int idx = i-1;
            while(idx >= 0 && heights[idx] >= heights[i])
                idx = sL[idx];
            sL[i] = idx;
        }
        for(int i = n-2; i >= 0; --i){
            int idx = i+1;
            while(idx < n && heights[idx] >= heights[i])
                idx = sR[idx];
            sR[i] = idx;
        }
        int result = 0;
        for(int i = 0; i < n; ++i)
            result = max(result, heights[i]*(sR[i] - sL[i] - 1));
        return result;
    }
};




Java:
-----
class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] sL = new int[n];
        int[] sR = new int[n];
        sL[0] = -1; sR[n-1] = n;
        for(int i = 1; i < n; ++i){
            int idx = i-1;
            while(idx >= 0 && heights[idx] >= heights[i])
                idx = sL[idx];
            sL[i] = idx;
        }
        for(int i = n-2; i >= 0; --i){
            int idx = i+1;
            while(idx < n && heights[idx] >= heights[i])
                idx = sR[idx];
            sR[i] = idx;
        }
        int result = 0;
        for(int i = 0; i < n; ++i)
            result = Math.max(result, heights[i]*(sR[i] - sL[i] - 1));
        return result;
    }
}




Python3:
--------
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        n = len(heights)
        sL, sR = [0]*n, [0]*n
        sL[0], sR[n-1] = -1, n
        for i in range(1, n):
            idx = i-1;
            while idx >= 0 and heights[idx] >= heights[i]:
                idx = sL[idx]
            sL[i] = idx
        for i in range(n-2, -1, -1):
            idx = i+1;
            while idx < n and heights[idx] >= heights[i]:
                idx = sR[idx]
            sR[i] = idx
        
        result = 0
        for i in range(0, n):
            result = max(result, heights[i]*(sR[i] - sL[i] - 1))
        return result
