Leetcode 987: Vertical Order Traversal of a Binary Tree
Detailed video explanation: https://youtu.be/4_LPqFtyWrQ
=========================================================


C++:
---
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void dfs(TreeNode* node, int r, int c, unordered_map<int, vector<pair<int, int>>>& cache, int& minC, int& maxC){
        if(node == nullptr) return;
        if(cache.count(c)) cache[c].push_back({r, node->val});
        else cache.insert({c, {{r, node->val}}});
        minC = min(minC, c);
        maxC = max(maxC, c);
        dfs(node->left, r+1, c-1, cache, minC, maxC);
        dfs(node->right, r+1, c+1, cache, minC, maxC);
    }
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> result;
        if(root == nullptr) return result;
        
        unordered_map<int, vector<pair<int, int>>> cache;
        int minC = 0, maxC = 0;
        dfs(root, 0, 0, cache, minC, maxC);
        
        for(int c = minC; c < maxC+1; ++c){
            sort(cache[c].begin(), cache[c].end(), [](pair<int, int>& p1, pair<int, int>& p2){
                return (p1.first < p2.first) || ((p1.first == p2.first) && (p1.second < p2.second));
            });
            vector<int> col;
            for(pair<int, int>& p: cache[c])
                col.push_back(p.second);
            result.push_back(col);
        }
        return result;
    }
};


Python3:
-------
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        result = []
        if root == None: return result
        cache = {}
        self.minC, self.maxC = 0, 0
        
        def dfs(node, r, c):
            if node == None: return
            if c in cache: cache[c].append([r, node.val])
            else: cache[c] = [[r, node.val]]
            self.minC = min(self.minC, c)
            self.maxC = max(self.maxC, c)
            dfs(node.left, r+1, c-1)
            dfs(node.right, r+1, c+1)
        
        dfs(root, 0, 0)
        for c in range(self.minC, self.maxC+1):
            col = sorted(cache[c], key = lambda x: (x[0], x[1]))
            col_sorted = []
            for p in col:
                col_sorted.append(p[1])
            result.append(col_sorted)
            
        return result

