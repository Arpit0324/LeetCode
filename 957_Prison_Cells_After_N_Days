Leetcode 957: Prison Cells After N Days
Detailed explanation video: https://youtu.be/XaayRYdKG0I

C++:
----
vector<int> prisonAfterNDays(vector<int>& cells, int N) {
        unordered_map<string, int> _map;
    
        for(int i = 0; i < N; ++i){
            string s(cells.begin(), cells.end());
            
            if(_map.find(s) != _map.end()){
                int loop_length = i - _map[s];
                int remaining_days = (N - i) % loop_length;
                return prisonAfterNDays(cells, remaining_days);
            } else {
                _map.insert({s, i});
                int prev = cells[0];
                for(int j = 1; j < 7; ++j){
                    int next = cells[j+1];
                    int curr = cells[j];
                    cells[j] = prev == next;//!(prev ^ next);
                    prev = curr;
                }
            }
            cells[0] = 0;
            cells[7] = 0;
        }
        return cells;
    }
    
    
Java:
-----
public int[] prisonAfterNDays(int[] cells, int N) {
        Map<String, Integer> _map = new HashMap();
        for(int i = 0; i < N; ++i){
            String s = Arrays.toString(cells);
            if(_map.containsKey(s)){
                int loop_length = i - _map.get(s);
                int remaining_days = (N - i) % loop_length;
                return prisonAfterNDays(cells, remaining_days);
            } else {
                _map.put(s, i);
                int prev = cells[0];
                for(int j = 1; j < 7; ++j){
                    int next = cells[j+1];
                    int curr = cells[j];
                    cells[j] = 1-(prev ^ next);
                    prev = curr;
                }
            }
            cells[0] = 0;
            cells[7] = 0;
        }
        return cells;
    }
    
    
Python3:
--------
def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:
        _map = {}
        self.cells = cells
    
        for i in range(N):
            s = str(cells)
            if s in _map:
                loop_length = i - _map[s]
                remaining_days = (N - i) % loop_length
                return self.prisonAfterNDays(self.cells, remaining_days)
            else:
                _map[s] = i
                prev = self.cells[0]
                for j in range(1,7):
                    curr, next = self.cells[j], self.cells[j+1]
                    self.cells[j] = 1 - (prev ^ next) #!(prev ^ next)
                    prev = curr
            self.cells[0], self.cells[7] = 0,0
        
        return self.cells
