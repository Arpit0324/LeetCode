Leetcode 409: Longest Palindrome
Detailed video Explanation: https://youtu.be/J_Di2LmeLBQ
==================================================


C++:
----
class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char, int> counts;
        for(char c: s) counts[c]++;
        
        int result = 0;
        bool odd_found = false;
        for(auto& c: counts){
            if(c.second % 2 == 0) result += c.second;
            else{
                odd_found = true;
                result += c.second - 1;
            }
        }
        if(odd_found) result++;
        return result;
    }
};


Java:
-----
class Solution {
    public int longestPalindrome(String s) {
        Map<Character, Integer> counts = new HashMap();
        for(char c: s.toCharArray())
            counts.put(c, counts.getOrDefault(c, 0) + 1);
        
        int result = 0;
        boolean odd_found = false;
        for(int c: counts.values()){
            if(c % 2 == 0) result += c;
            else{
                odd_found = true;
                result += c - 1;
            }
        }
        if(odd_found) result++;
        return result;
    }
}


Python3:
--------
class Solution:
    def longestPalindrome(self, s: str) -> int:
        counts = {}
        for c in s: counts[c] = counts.get(c, 0) + 1
        
        result, odd_found = 0, False
        for _, c in counts.items():
            if c % 2 == 0: result += c
            else:
                odd_found = True
                result += c - 1
        if odd_found: result += 1
        return result

