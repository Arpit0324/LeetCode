Leetcode 967: Numbers With Same Consecutive Differences
Detailed video explanation: https://youtu.be/TAfXh2l9FyA
========================================================


C++:
----
class Solution {
    void dfs(int num, int N, int K, vector<int>& result){
        if(N == 0){
            result.push_back(num);
            return;
        }
        int last_digit = num%10;
        if(last_digit >= K) dfs(num*10 + last_digit - K, N-1, K, result);
        if(K > 0 && last_digit + K < 10) dfs(num*10 + last_digit + K, N-1, K, result);
    }
public:
    vector<int> numsSameConsecDiff(int N, int K) {
        vector<int> result;
        if(N == 1) result.push_back(0);
        for(int d = 1; d < 10; ++d)
            dfs(d, N-1, K, result);
        
        return result;
    }
};


Java:
-----
class Solution {
    private void dfs(int num, int N, int K, List<Integer> result){
        if(N == 0){
            result.add(num);
            return;
        }
        int last_digit = num%10;
        if(last_digit >= K) dfs(num*10 + last_digit - K, N-1, K, result);
        if(K > 0 && last_digit + K < 10) dfs(num*10 + last_digit + K, N-1, K, result);
    }
     
    public int[] numsSameConsecDiff(int N, int K) {
        List<Integer> result = new ArrayList();
        if(N == 1) result.add(0);
        for(int d = 1; d < 10; ++d)
            dfs(d, N-1, K, result);
        
        return result.stream().mapToInt(i->i).toArray();
    }
}


Python3:
-------
class Solution:
    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:
        result = []
        if N == 1: result.append(0)
        
        def dfs( num, N):
            if N == 0:
                result.append(num)
                return
            last_digit = num%10
            if last_digit >= K: dfs(num*10 + last_digit - K, N-1)
            if K > 0 and last_digit + K < 10: dfs(num*10 + last_digit + K, N-1)
        
        for d in range(1, 10):
            dfs(d, N-1)
        
        return result


